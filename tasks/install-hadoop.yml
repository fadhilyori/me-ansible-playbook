---
- name: Define hadoop_listen_ip
  ansible.builtin.set_fact:
    hadoop_listen_ip: "{{ __hadoop_listen_ip }}"
  when: hadoop_listen_ip is not defined

- name: Create service account for Apache Hadoop
  ansible.builtin.user:
    name: "{{ ansible_ssh_user }}"
    generate_ssh_key: true

- name: Set authorized key taken from file
  ansible.builtin.shell:
    cmd: cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys

- name: Copy JDK Archive
  ansible.builtin.copy:
    src: "files/{{ jdk_archive_filename }}"
    dest: "/tmp/"
    mode: 0644

- name: Ensure jdk directory exists
  ansible.builtin.file:
    path: "{{ item }}"
    mode: 0775
    state: directory
  with_items:
    - "~/jdk"
    - "~/hadoop"

- name: Extract JDK distribution
  ansible.builtin.unarchive:
    src: "/tmp/{{ jdk_archive_filename }}"
    dest: "~/jdk"
    creates: "~/jdk/bin"
    copy: false
    extra_opts: [--strip-components=1]

- name: Copy Hadoop Archive
  ansible.builtin.copy:
    src: "files/{{ hadoop_archive_filename }}"
    dest: "/tmp/"
    mode: 0644

- name: Extract Hadoop distribution
  ansible.builtin.unarchive:
    src: "/tmp/{{ hadoop_archive_filename }}"
    dest: "~/hadoop"
    creates: "~/hadoop/etc"
    copy: false
    extra_opts: [--strip-components=1]

- name: Configure hadoop-env.sh file
  ansible.builtin.template:
    src: "./hadoop/hadoop-env.sh.j2"
    dest: "~/hadoop/etc/hadoop/hadoop-env.sh"
    mode: 0755

- name: Configure core-site.xml file
  ansible.builtin.template:
    src: "./hadoop/core-site.xml.j2"
    dest: "~/hadoop/etc/hadoop/core-site.xml"
    mode: 0755

- name: Configure hdfs-site.xml file
  ansible.builtin.template:
    src: "./hadoop/hdfs-site.xml.j2"
    dest: "~/hadoop/etc/hadoop/hdfs-site.xml"
    mode: 0755

- name: Stop Hadoop service
  ansible.builtin.shell:
    cmd: ~/hadoop/sbin/stop-dfs.sh

- name: Remove hadoop_data folder
  ansible.builtin.file:
    path: ~/hadoop_data
    state: absent

- name: Ensure folder logs exist
  ansible.builtin.file:
    path: "~/hadoop/logs"
    mode: 0775
    state: directory

- name: Format a Hadoop Namenode
  ansible.builtin.shell:
    cmd: ~/hadoop/bin/hdfs namenode -format

- name: Start Hadoop service
  ansible.builtin.shell:
    cmd: ~/hadoop/sbin/start-dfs.sh

- name: Copy Kaspacore related file to machine
  ansible.builtin.copy:
    src: "files/{{ item }}"
    dest: "/tmp/"
    mode: 0644
  with_items:
    - "kaspacore.jar"
    - "GeoLite2-City.mmdb"

- name: Pause for 2 minute to wait hadoop starting up
  ansible.builtin.pause:
    minutes: 2

- name: Create Hadoop needed directory
  ansible.builtin.shell:
    cmd: "{{ item }}"
  with_items:
    - "~/hadoop/bin/hdfs dfs -mkdir -p hdfs://localhost:9000/user/{{ ansible_ssh_user }}/kaspa-checkpoint"
    - "~/hadoop/bin/hdfs dfs -mkdir -p hdfs://localhost:9000/user/{{ ansible_ssh_user }}/kaspacore/files"
    - "~/hadoop/bin/hdfs dfs -mkdir -p hdfs://localhost:9000/user/{{ ansible_ssh_user }}/spark/spark-events"

- name: Upload GeoLite2-City Maxmind Geo Database
  ansible.builtin.shell:
    cmd: "{{ item }}"
  with_items:
    - "~/hadoop/bin/hdfs dfs -put /tmp/GeoLite2-City.mmdb /user/{{ ansible_ssh_user }}/kaspacore/files"
    - "~/hadoop/bin/hdfs dfs -put /tmp/kaspacore.jar /user/{{ ansible_ssh_user }}/kaspacore/files"

- name: Cleanup Hadoop tar
  ansible.builtin.file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items: "{{ hadoop_archive_filename }}"